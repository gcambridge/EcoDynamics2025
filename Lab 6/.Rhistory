rect_area <- side1 * side2
rect_area
calc_rect_area <- function(a, b){
area <- a * b
return(area)
}
side1 <- 5
side2 <- 40
area <- calc_rect_area(a = side1, b = side2)
area
calc_circle_area <- function(r){
area  <- pi * r ^ 2
return(area)
}
a <- c(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
a
?c
index <- 1
a[index]
a[1]
a[3]
subset
a[c(1,3,4)]
range
a[1:5]
a <- array(0, dim = 10)
b <- array(0, dim = c(10, 20))
a
b
b[4, 5] <- 10
b
b[7,5] <- 100
b
loop_length <- 10
sequence <- seq(1, loop_length, by = 1)
for(i in sequence){
print("Pass through loop")
print(i)
}
b[2, 1] <- 6
b[2, 2] <- 6
b[2, 3] <- 6
b[2, 4] <- 6
b[2, 5] <- 6
b[2, 6] <- 6
b[2, 7] <- 6
b[2, 8] <- 6
b[2, 9] <- 6
b[2, 10] <- 6
i <- 1
b[2, i] <- 6
i <- 2
b[2, i] <- 6
i <- 3
b[2, i] <- 6
i <- 4
b[2, i] <- 6
i <- 5
b[2, i] <- 6
i <- 6
b[2, i] <- 6
i <- 7
b[2, i] <- 6
i <- 8
b[2, i] <- 6
i <- 9
b[2, i] <- 6
i <- 10
b[2, i] <- 6
seq <- seq(1, 20, by=1)
#Cleaner -> seq <- 1:1:20
for(i in seq){
b[2, i] <- 7
print(i)
}
b
1:loop_length
loop_length <- 10
for(i in 1:loop_length){
print("Pass through loop")
print(i)
}
npp <- 300
simulation_years <- 200
veg <- array(data = NA, dim = c(simulation_years))
knitr::opts_chunk$set(echo = TRUE)
simulation_years <- 200  #total number of years you want to simulate
veg <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
veg[1] <- 1  #initializing the vegetation biomass in year 1 to be 1
npp <- 300  #growth rate
u <- 0.02  #mortality rate
dt <- 1 #number of years for each time step
for(i in 2:simulation_years){
#dBdt is the derivative (Change over the time-step)
#It adds npp and substracts a proportion of biomass that died
dBdt <- npp - veg[i-1] * u
#add the change to the previous year's biomass
#note: a positive number of dBdt will add biomass, while a negative value will subtract
#note: since dBdt is the change per year, you need to multiply
#      it by the number of years in a time step (which is 1)
veg[i] <- veg[i-1] + dBdt * dt
}
year <- seq(1, simulation_years, 1)
plot(year, veg, type = 'l', xlab = 'years', ylab= 'Mean biomass (g m-2)')
simulation_years <- 1000  #total number of years you want to simulate
soil <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
veg <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
soil[1] <- 1000  #initializing the soil stock to be 1000 g C m-2
veg[1] <- 1  #initializing the vegetation biomass in year 1 to be 1
u <- 0.02  #mortality rate
k <- .005 #decomposition rate
npp <- 300  #growth rate
u <- 0.02
dt <- 1 #number of years for each time step
for(i in 2:simulation_years){
#Growth of forest
dBdt <- npp - veg[i-1] * u
veg[i] <- veg[i-1] + dBdt * dt
#Building soil stock
dSdt <- veg[i-1]*u - soil[i-1]*k
soil[i] <- soil[i-1] + dSdt * dt
}
year <- seq(1, simulation_years, 1)
plot(year, soil, type = 'l', xlab = 'years', ylab= 'Mean Soil Stock (g m-2)')
simulation_years <- 1000  #total number of years you want to simulate
soil <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
veg <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
soil[1] <- 1000  #initializing the soil stock to be 1000 g C m-2
veg[1] <- 1  #initializing the vegetation biomass in year 1 to be 1
u <- 0.02  #mortality rate
k <- .005 #decomposition rate
npp <- 300  #growth rate
u <- 0.02
dt <- 1 #number of years for each time step
for(i in 2:simulation_years){
#Growth of forest
dBdt <- npp - veg[i-1] * u
veg[i] <- veg[i-1] + dBdt * dt
#Building soil stock
dSdt <- veg[i-1]*u - soil[i-1]*k
soil[i] <- soil[i-1] + dSdt * dt
}
year <- seq(1, simulation_years, 1)
plot(year, veg, type = 'l', xlab = 'years', ylab= 'Mean Soil Stock (g m-2)')
points(year, soil, type= 'l' , col = 'red')
simulation_years <- 1000  #total number of years you want to simulate
soil <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
veg <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
soil[1] <- 1000  #initializing the soil stock to be 1000 g C m-2
veg[1] <- 1  #initializing the vegetation biomass in year 1 to be 1
u <- 0.02  #mortality rate
k <- .005 #decomposition rate
npp <- 300  #growth rate
u <- 0.02
dt <- 1 #number of years for each time step
for(i in 2:simulation_years){
#Growth of forest
dBdt <- npp - veg[i-1] * u
veg[i] <- veg[i-1] + dBdt * dt
#Building soil stock
dSdt <- veg[i-1]*u - soil[i-1]*k
soil[i] <- soil[i-1] + dSdt * dt
}
year <- seq(1, simulation_years, 1)
ylimits <- range(c(veg, soil))
plot(year, veg, type = 'l', xlab = 'years', ylab= 'Mean Soil Stock (g m-2)',  ylim = ylimits)
points(year, soil, type= 'l' , col = 'red')
simulation_years <- 1000  #total number of years you want to simulate
soil <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
soil_1 <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
veg <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
soil[1] <- 1000  #initializing the soil stock to be 1000 g C m-2
soil_1[1] <- 1000  #initializing the soil stock to be 1000 g C m-2
veg[1] <- 1  #initializing the vegetation biomass in year 1 to be 1
u <- 0.02  #mortality rate
k <- .005 #decomposition rate
k_1 <- .001
npp <- 300  #growth rate
u <- 0.02
dt <- 1 #number of years for each time step
for(i in 2:simulation_years){
#Growth of forest
dBdt <- npp - veg[i-1] * u
veg[i] <- veg[i-1] + dBdt * dt
#Building soil stock with k = .005
dSdt <- veg[i-1]*u - soil[i-1]*k
soil[i] <- soil[i-1] + dSdt * dt
#Building soil stock with k = .001
dSdt_1 <- veg_1[i-1]*u - soil_1[i-1]*k_1
soil_1[i] <- soil_1[i-1] + dSdt_1 * dt
}
simulation_years <- 1000  #total number of years you want to simulate
soil <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
soil_1 <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
veg <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
soil[1] <- 1000  #initializing the soil stock to be 1000 g C m-2
soil_1[1] <- 1000  #initializing the soil stock to be 1000 g C m-2
veg[1] <- 1  #initializing the vegetation biomass in year 1 to be 1
u <- 0.02  #mortality rate
k <- .005 #decomposition rate
k_1 <- .001
npp <- 300  #growth rate
u <- 0.02
dt <- 1 #number of years for each time step
for(i in 2:simulation_years){
#Growth of forest
dBdt <- npp - veg[i-1] * u
veg[i] <- veg[i-1] + dBdt * dt
#Building soil stock with k = .005
dSdt <- veg[i-1]*u - soil[i-1]*k
soil[i] <- soil[i-1] + dSdt * dt
#Building soil stock with k = .001
dSdt_1 <- veg[i-1]*u - soil_1[i-1]*k_1
soil_1[i] <- soil_1[i-1] + dSdt_1 * dt
}
year <- seq(1, simulation_years, 1)
ylimits <- range(c(veg, soil))
plot(year, veg, type = 'l', xlab = 'years', ylab= 'Mean Soil Stock (g m-2)',  ylim = ylimits)
points(year, soil, type= 'l' , col = 'red')
points(year, soil_1, type= 'l' , col = 'blue')
simulation_years <- 1000  #total number of years you want to simulate
soil <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
soil_1 <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
veg <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
soil[1] <- 1000  #initializing the soil stock to be 1000 g C m-2
soil_1[1] <- 1000  #initializing the soil stock to be 1000 g C m-2
veg[1] <- 1  #initializing the vegetation biomass in year 1 to be 1
u <- 0.02  #mortality rate
k <- .005 #decomposition rate
k_1 <- .001
npp <- 300  #growth rate
u <- 0.02
dt <- 1 #number of years for each time step
for(i in 2:simulation_years){
#Growth of forest
dBdt <- npp - veg[i-1] * u
veg[i] <- veg[i-1] + dBdt * dt
#Building soil stock with k = .005
dSdt <- veg[i-1]*u - soil[i-1]*k
soil[i] <- soil[i-1] + dSdt * dt
#Building soil stock with k = .001
dSdt_1 <- veg[i-1]*u - soil_1[i-1]*k_1
soil_1[i] <- soil_1[i-1] + dSdt_1 * dt
}
year <- seq(1, simulation_years, 1)
ylimits <- range(c(veg, soil, soil_1))
plot(year, veg, type = 'l', xlab = 'years', ylab= 'Mean Soil Stock (g m-2)',  ylim = ylimits)
points(year, soil, type= 'l' , col = 'red')
points(year, soil_1, type= 'l' , col = 'blue')
simulation_years <- 1000  #total number of years you want to simulate
soil <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
soil_1 <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
veg <- array(NA, dim = c(simulation_years))  #creating the array to store the yearly vegetation biomass
soil[1] <- 1000  #initializing the soil stock to be 1000 g C m-2
soil_1[1] <- 1000  #initializing the soil stock to be 1000 g C m-2
veg[1] <- 1  #initializing the vegetation biomass in year 1 to be 1
u <- 0.02  #mortality rate
k <- .005 #decomposition rate
k_1 <- .001
npp <- 300  #growth rate
u <- 0.02
dt <- 1 #number of years for each time step
for(i in 2:simulation_years){
#Growth of forest
dBdt <- npp - veg[i-1] * u
veg[i] <- veg[i-1] + dBdt * dt
#Building soil stock with k = .005
dSdt <- veg[i-1]*u - soil[i-1]*k
soil[i] <- soil[i-1] + dSdt * dt
#Building soil stock with k = .001
dSdt_1 <- veg[i-1]*u - soil_1[i-1]*k_1
soil_1[i] <- soil_1[i-1] + dSdt_1 * dt
}
year <- seq(1, simulation_years, 1)
ylimits <- range(c(veg, soil, soil_1))
plot(year, veg, type = 'l', xlab = 'years', ylab= 'Mean Soil Stock (g m-2)',  ylim = ylimits)
points(year, soil, type= 'l' , col = 'red')
points(year, soil_1, type= 'l' , col = 'blue')
knitr::opts_chunk$set(echo = TRUE)
light_function <- function(x){
t <- x
0.5 * (540 + 440 * sin(2 * pi * t / 365 - 1.4))
}
curve(light_function(x),
from = 1, to = 730,
ylab = "umol/m2/s",
xlab = "# days",
main = "Light input")
knitr::opts_chunk$set(echo = TRUE)
light_function <- function(x){
t <- x
0.5 * (540 + 440 * sin(2 * pi * t / 365 - 1.4))
}
curve(light_function(x),
from = 1, to = 730,
ylab = "umol/m2/s",
xlab = "# days",
main = "Light input")
NPZD_model <- function(t, states, parms){
#unpack states
PHYTO <- states[1]
ZOO <- states[2]
DET <- states[3]
DIN <- states[4]
#unpack parms
maxUptake <- parms[1]
kspar <- parms[2] #Sunlight Limiting
ksdin <- parms[3] #Nitrogen limiting
maxGrazing <- parms[4]
ksphyto <- parms[5]
pFeces <- parms[6] #proportion of waste to feces
excretionRate <- parms[7]
mortalityRate <- parms[8]
mineralizationRate <- parms[9]
Chl_Nratio <- parms[10]
#Calculate the environment (note that this depends on time)
#50% of light is PAR
PAR <- 0.5 * (540 + 440 * sin(2 * pi * t / 365 - 1.4))
#calculate fluxes
fDIN <- DIN / (DIN + ksdin)
fLight <- PAR / (PAR + kspar)
uptake <- maxUptake * PHYTO * fDIN * fLight #min(c(fDIN, fLight))
fPHYTO <- PHYTO / (PHYTO + ksphyto)
grazing <- maxGrazing * ZOO * fPHYTO
feces_production <- grazing * pFeces
excretion <- excretionRate * ZOO
zoo_mortality <- mortalityRate * ZOO^2
mineralization <- mineralizationRate * DET
#calculate extra outputs
Chlorophyll <- PHYTO * Chl_Nratio
#calculate derivatives
dPHYTO_dt <- uptake - grazing
dZOO_dt <- grazing - feces_production - zoo_mortality - excretion
dDETRITUS_dt <- zoo_mortality + feces_production - mineralization
dDIN_dt <- excretion + mineralization - uptake
#return the list of derivatives plus any other variables that you are interested in
return(list(c(dPHYTO_dt = dPHYTO_dt, # the rates of change
dZOO_dt = dZOO_dt,
dDETRITUS_dt = dDETRITUS_dt,
dDIN_dt = dDIN_dt),
# other output variables
c(Chlorophyll = Chlorophyll,
PAR = PAR)))
}
parms <- c(
1.0,  #maxUptake INSERT UNITS
120,  #kspar INSERT UNITS
0.5,  #ksdin INSERT UNITS
1.0,  #maxGrazing INSERT UNITS
1.0,    #ksphyto INSERT UNITS
0.3,  #pFaeces INSERT UNITS
0.1,  #excretionRate INSERT UNITS
0.4,  #mortalityRate INSERT UNITS
0.1,  #mineralizationRate INSERT UNITS
1.0)    #Chl_Nratio INSERT UNITS
yini <- c(
PHYTO = 1, #INSERT UNITS
ZOO = 0.8,  #INSERT UNITS
DETRITUS = 1,  #INSERT UNITS
DIN = 9)  #INSERT UNITS
#Use DeSolve to integrate
library(deSolve)
simulation_time <- 365 * 2
dt <- 1
times <- seq(1, simulation_time, by = dt)
output <- ode(y = yini, times = times, func = NPZD_model, parms = parms, method = "ode45")
#Plot the model output
#First convert output to a data frame
output <- as.data.frame(output)
par(mfrow = c(2, 3))
plot(times, output$PAR, xlab = "time (days)", ylab = "umol/m2/s", main = "PAR", type = "l")
plot(times, output$PHYTO, xlab="time (days)", ylab ="mmolN/m3", main = "Phytoplankton", type = "l")
plot(times, output$Chlorophyll, xlab = "time (days)", ylab = "ug/l", main = "Chlorophyll", type = "l")
plot(times, output$ZOO, xlab = "time (days)", ylab = "mmolN/m3", main = "Zooplankton", type = "l")
plot(times, output$DIN, xlab = "time (days)", ylab = "mmolN/m3",main="DIN", type = "l")
plot(times, output$DETRITUS, xlab = "time (days)", ylab = "mmolN/m3", main = "DETRITUS", type = "l")
knitr::opts_chunk$set(echo = TRUE)
PHYTO <- c(10, 0, 10)
advection_flux_density_top <- 0
area <- 100
u <- 0.2
delx <- 0.25
advection_flux <- u * PHYTO * area
advection_flux_top <- advection_flux_density_top * area
advection_flux <- c(advection_flux_top, advection_flux)
advection_flux
PHYTO
diff(advection_flux)
advection <- -diff(advection_flux)
advection <- -(1/area)*(diff(advection_flux) / delx)
advection
PHYTO
D <- 0.01
area <- 100
top_diffusion_gradient <- 0.0
bottom_diffusion_gradient <- 0.0
delx <- 0.25
gradient_between_boxes <- diff(PHYTO)
gradient <- c(top_diffusion_gradient, gradient_between_boxes, bottom_diffusion_gradient)
gradient <- gradient / delx
gradient
PHYTO
diffusion_flux <- area * -D * gradient
diff(diffusion_flux)
-diff(diffusion_flux)
diffusion <- - (1 / area) * (diff(diffusion_flux) / delx)
diffusion
t <- 1
PAR_surface   <- 0.5 * (540 + 440 * sin(2 * pi * t / 365 - 1.4))
light_extinction <- 0.9
lake_depth <- 0.75
layer_mid_depths <- seq(delx/2, lake_depth - (delx/2), by = delx)
layer_PAR <- PAR_surface * exp(-light_extinction * layer_mid_depths)
plot(layer_mid_depths,layer_PAR , type = "l", xlab = "Lake depth (m)", ylab = "PAR")
maxUptake <- 2
ksPAR <- 140
C_Uptake <- maxUptake *  PHYTO * (layer_PAR / (layer_PAR + ksPAR))
C_Uptake
mortalityRate <- 0.05
Mortality <- mortalityRate * PHYTO^2
reaction <- C_Uptake - Mortality
print("PHYTO")
PHYTO
print("Advection")
advection
print("Diffusion")
diffusion
print("Reaction")
reaction
dPHYTO_dt <- advection + diffusion + reaction
dPHYTO_dt
phyto_depth_model <- function(t, state, parms){
#unpack states
#note that PHYTOS is a vector where each cell is a different depth
PHYTO <- state
#Unpack parameters
u <- parms[1]
maxUptake <- parms[2]
light_extinction <- parms[3]
ksPAR <- parms[4]
mortalityRate <- parms[5]
D <- parms[6]
#Boundary conditions
phyto_flux_top <- parms[7]
top_diffusion_gradient <- parms[8]
bottom_diffusion_gradient <- parms[9]
#Physical description
area <- parms[10]
lake_depth <- parms[11]
numboxes <- parms[12]
#Calculate the thickness of each layer
delx <- lake_depth / numboxes
#Calculate the environment (note that this depends on time)
#This the par at the top of the water column
PAR_surface   <- 0.5 * (540 + 440 * sin(2 * pi * t / 365 - 1.4))
# Reaction
#calculate the depth of the middle of the box
layer_mid_depths <- seq(delx, lake_depth, by = delx)
layer_PAR <- PAR_surface * exp(-light_extinction * layer_mid_depths)
C_Uptake <- maxUptake *  PHYTO * (layer_PAR / (layer_PAR + ksPAR))
Mortality <- mortalityRate * PHYTO^2
reaction <- C_Uptake - Mortality
#Diffusion calculation
gradient_middle_boxes <- diff(PHYTO) / delX
gradient <- c(top_diffusion_gradient, gradient_middle_boxes, bottom_diffusion_gradient)
diffusion_flux <- -area * -D * gradient
diffusion <- (1/area) * (diff(diffusion_flux) / delx)
# Advection calculation
advection_flux <- c(phyto_flux_top, u * PHYTO) * area
advection <- -(1/area) * (diff(advection_flux) / delx)
# Net change for each box (this a vector)
dPHYTO_dt <- advection + diffusion + reaction
#This returns the VECTOR of derivatives for each layer box
list(c(dPHYTO_dt))
}
#Parameters
#Currency = mmolC/m3
#Time scale = day
parms <- c(
#Parameters
0.2, # vp: meters/day, Phyto sinking rate
2, #maxUptake: 1/day, Max Phyto growth rate    #
0.9,  #light_extinction: unitless, Light extinction rate
140,  #ksPAR units of light, Light half saturation
0.5, #mortalityRate: 1/day, mortality of plankton
0.01, # D: m2/day, Diffusion rate constant
#Boundary conditions
0, # phyto_flux_top (BOUNDRY CONDITION): mmolC/m2/d  flux at the upper boundary (Phyto input from outside the lake)
0, #top_diffusion_gradient (BOUNDRY CONDITION): mmolC/m, concentraton gradient at top
0, #bottom_diffusion_gradient (BOUNDRY CONDITION): mmolC/m, concentration gradient at bottom
#Physical descriptions of the lake
1, #horizontal_area: horizontal area of lake m2
12, #lake_depth: depth of lake (m)
48)  #numboxes: number of boxes simulated
numboxes <- parms[12]
#First set all layers equal to zero
yini <- rep(0, numboxes)
#Then initialize the layers where the Phytos are starting
yini[1] <- 3
library(deSolve)
#Use DeSolve to integrate
simulation_time <- 2 * 365 #DAYS
dt <- 1
times <- seq(1, simulation_time, by = dt)
output <- ode(y = yini,
times = times,
func = phyto_depth_model,
parms = parms)
setwd("~/GitHub/EcoDynamics2025/Lab 6")
knitr::opts_chunk$set(echo = TRUE)
#INSERT CODE TO SOLVE AND PLOT ANSWER
#Plot
